FROM debian:stretch
LABEL maintainer "RÃ©mi HUGUET"

#### DYNAMIC ANALYSIS ### 

##############################################
## Install and build everything from source ##
##############################################

################################################
## For release see Dockerfile.dynamic_release ##
################################################



# dependency
RUN apt-get update && \
    mkdir -p /usr/share/man/man1 && \    
    apt-get install -y \ 
    git wget curl \
    gcc g++ make \
    build-essential  \
    cmake autoconf \
    ## For release see Dockerfile.dynamic_release ##
################################################



# dependency
RUN apt-get update && \
    mkdir -p /usr/share/man/man1 && \    
    apt-get install -y \ 
    git wget curl \
    gcc g++ make \
    build-essential  \
    cmake autoconf \
    gcovr lcov \ 
    libdbi-perl \
    unzip \ 
    ant \ 
    openjdk-11-jdk openjdk-11-jre  




# get Source and Build

#################
# Code coverage #
#################

### Google Test

RUN git clone https://github.com/google/googletest && \
    cd googletest && mkdir build && cd build && \
    cmake ../ && make


##########################
# Memory error detection #
##########################

## Address sanitizer

# Already part of GCC and LLVM 
# If you want to build it from source : 
# Don't forget to set llvm checkout path 

#RUN apt-get install cmake llvm clang autoconf && \
#    CMAKE_BUILD_TYPE=release && \
#    LLVM_ENABLE_ASSERTIONS=ON && \
#    LLVM_ENABLE_WERROR=ON && \
#    LLVM_TARGETS_TO_BUILD=x86 && \
#    [CC=clang CXX=clang++] cmake -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_ASSERTIONS=ON [-DLLVM_ENABLE_WERROR=ON] [-DLLVM_TARGETS_TO_BUILD=X86] /path/to/llvm/checkout && \
#    make -j12 # build everything && \
#    make check-all -j12 # build and run all tests (llvm+clang+ASan) && \
:
    gcovr lcov \ 
    libdbi-perl \
    unzip \ 
    ant \ 
      




# get Source and Build

#################
# Code coverage #
#################

### Google Test

RUN git clone https://github.com/google/googletest && \
    cd googletest && mkdir build && cd build && \
    cmake ../ && make


##########################
# Memory error detection #
##########################

## Address sanitizer

# Already part of GCC and LLVM 
# If you want to build it from source : 
# Don't forget to set llvm checkout path 

#RUN apt-get install cmake llvm clang autoconf && \
#    CMAKE_BUILD_TYPE=release && \
#    LLVM_ENABLE_ASSERTIONS=ON && \
#    LLVM_ENABLE_WERROR=ON && \
#    LLVM_TARGETS_TO_BUILD=x86 && \
#    [CC=clang CXX=clang++] cmake -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_ASSERTIONS=ON [-DLLVM_ENABLE_WERROR=ON] [-DLLVM_TARGETS_TO_BUILD=X86] /path/to/llvm/checkout && \
#    make -j12 # build everything && \
#    make check-all -j12 # build and run all tests (llvm+clang+ASan) && \
#    make check-sanitizer -j12 # build and run sanitizer_common tests && \
#    make check-asan -j12 # build and run ASan unit and output tests && \

## DMalloc

# ERROR due to incompatibility between -O2 gcc optimization and strndup of string.h...
#RUN wget http://dmalloc.com/releases/dmalloc-5.5.2.tgz && \ 
#    tar -xvf dmalloc-5.5.2.tgz  && cd dmalloc-5.5.2 && \
#    ./configure && make 

# so we install the apt release.
RUN apt-get install -y libdmalloc5


## Valgrind

RUN git clone git://sourceware.org/git/valgrind.git &&  \ 
    cd valgrind && ./autogen.sh && \ 
    ./configure && \ 
    make && make install 

######################
# Fault localization #
######################

## Defect4J 

RUN git clone https://github.com/rjust/defects4j && \ 
    cd defects4j && ./init.sh && \
    export PATH=$PATH:${PWD}/framework/bin && \
    defects4j info -p Lang 

    # // TODO -> cpam DBI (+init)


## GZoltar 

RUN wget https://github.com/GZoltar/gzoltar/releases/download/v1.7.2/gzoltar-1.7.2.201905090602.zip && \ 
    unzip gzoltar-1.7.2.201905090602.zip -d gzoltar && \ 
    rm -rf gzoltar-1.7.2.201905090602.zip


# InSS/Mis-MCP => road2default
RUN git clone https://github.com/higoramario/mis-mcp && \
    cd mis-mcp && ant && \ 
    cp -r build/mis ~/ && \ 
    export INSS_HOME=~/mis && \ 
    chmod +x INSS_HOME/bin/* && \ 
    export PATH=$PATH:${INSS_HOME}/bin

RUN git clone https://github.com/saeg/road2fault && \ 
    cd road2fault && ant && \ 
    export ROAD2FAULT_HOME=~/road2fault/build && \ 
    sudo chmod +x ${ROAD2FAULT_HOME}/bin/*
    

# Linking 

## DMalloc
RUN ln -s dmalloc/dmalloc /usr/bin/dmalloc || cp dmalloc/dmalloc /usr/bin/dmalloc

## gzoltar
RUN alias gzoltar='java -jar /home/hug211mire/gzoltar/lib/gzoltarcli.jar' 



# Testing 

RUN gcov --version
RUN gcovr --version
RUN lcov --version
RUN dmalloc --version
RUN defects4j info -p Lang
RUN gzoltar version


